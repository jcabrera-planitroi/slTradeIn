// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using slTradeIn.Data;

#nullable disable

namespace slTradeIn.Migrations
{
    [DbContext(typeof(PlanITVisionContext))]
    partial class PlanITVisionContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Detail_TTU_identityRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Detail_TTU_identityRoleClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Detail_TTU_identityUserAuth", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Detail_TTU_identityUserClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("Detail_TTU_identityUserLogin", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("Detail_TTU_identityUserRole", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("Detail_TTU_identityUserToken", (string)null);
                });

            modelBuilder.Entity("slTradeIn.Data.Detail_ModelMaster", b =>
                {
                    b.Property<int>("iModelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("iModelID"));

                    b.Property<bool?>("bACAdaptorIncluded")
                        .HasColumnType("bit");

                    b.Property<bool?>("bFingerPrintRdr")
                        .HasColumnType("bit");

                    b.Property<bool?>("bKeyboardIncluded")
                        .HasColumnType("bit");

                    b.Property<bool?>("bMouseIncluded")
                        .HasColumnType("bit");

                    b.Property<bool>("bNotificationSent")
                        .HasColumnType("bit");

                    b.Property<bool?>("bStylus")
                        .HasColumnType("bit");

                    b.Property<bool?>("bTouchScreen")
                        .HasColumnType("bit");

                    b.Property<bool?>("bWIFI")
                        .HasColumnType("bit");

                    b.Property<bool?>("bWebCam")
                        .HasColumnType("bit");

                    b.Property<DateTime>("dDateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("dDateUpdated")
                        .HasColumnType("datetime");

                    b.Property<int>("iCategoryID")
                        .HasColumnType("int");

                    b.Property<int>("iCreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("iMfg")
                        .HasColumnType("int");

                    b.Property<int?>("iUpdatedBy")
                        .HasColumnType("int");

                    b.Property<decimal?>("nHeight")
                        .HasColumnType("decimal(9, 2)");

                    b.Property<decimal?>("nLength")
                        .HasColumnType("decimal(9, 2)");

                    b.Property<decimal?>("nWeight")
                        .HasColumnType("decimal(9, 2)");

                    b.Property<decimal?>("nWidth")
                        .HasColumnType("decimal(9, 2)");

                    b.Property<string>("vModelNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("yBGradeMarketplaceFMV")
                        .HasColumnType("money");

                    b.Property<decimal?>("yBGradeRetailFMV")
                        .HasColumnType("money");

                    b.Property<decimal?>("yBGradeWholeSaleFMV")
                        .HasColumnType("money");

                    b.Property<decimal?>("yCGradeMarketplaceFMV")
                        .HasColumnType("money");

                    b.Property<decimal?>("yCGradeRetailFMV")
                        .HasColumnType("money");

                    b.Property<decimal?>("yCGradeWholeSaleFMV")
                        .HasColumnType("money");

                    b.Property<decimal?>("yDGradeWholeSaleFMV")
                        .HasColumnType("money");

                    b.HasKey("iModelID")
                        .HasName("PK__Detail_M__F2E8972C9BB7096B");

                    b.ToTable("Detail_ModelMaster", t =>
                        {
                            t.HasTrigger("History_ModelMaster_Delete");

                            t.HasTrigger("History_ModelMaster_Insert");

                            t.HasTrigger("History_ModelMaster_Update");
                        });
                });

            modelBuilder.Entity("slTradeIn.Data.Detail_ModelMasterPricing", b =>
                {
                    b.Property<decimal>("iModelPricingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18, 0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("iModelPricingID"));

                    b.Property<decimal?>("MPATID")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<bool?>("bIsAUE")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("dAUEDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("dDateImported")
                        .HasColumnType("datetime");

                    b.Property<int?>("iFamily1")
                        .HasColumnType("int");

                    b.Property<int?>("iFamily2")
                        .HasColumnType("int");

                    b.Property<int>("iModelID")
                        .HasColumnType("int");

                    b.Property<int?>("iOS")
                        .HasColumnType("int");

                    b.Property<int?>("iProcessor")
                        .HasColumnType("int");

                    b.Property<int?>("iProcessorGen")
                        .HasColumnType("int");

                    b.Property<int?>("iProcessorSpeed")
                        .HasColumnType("int");

                    b.Property<int?>("iRam")
                        .HasColumnType("int");

                    b.Property<int?>("iScreenSize")
                        .HasColumnType("int");

                    b.Property<int?>("iStorageHDD")
                        .HasColumnType("int");

                    b.Property<int?>("iStorageSSD")
                        .HasColumnType("int");

                    b.Property<int?>("iYear")
                        .HasColumnType("int");

                    b.Property<decimal?>("mPrice_MarketRetail_B")
                        .HasColumnType("money");

                    b.Property<decimal?>("mPrice_MarketRetail_C")
                        .HasColumnType("money");

                    b.Property<decimal?>("mPrice_TradeIn_B")
                        .HasColumnType("money");

                    b.Property<decimal?>("mPrice_TradeIn_C")
                        .HasColumnType("money");

                    b.Property<decimal?>("mPrice_TradeIn_D")
                        .HasColumnType("money");

                    b.Property<decimal?>("mPrice_Wholesale")
                        .HasColumnType("money");

                    b.Property<string>("vDatasource")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("vDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("vListName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("vPartNumber")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("vProcessorModel")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("vProcessorNumber")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("vSKU")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("vTitle")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("iModelPricingID");

                    b.HasIndex("iModelID");

                    b.ToTable("Detail_ModelMasterPricing");
                });

            modelBuilder.Entity("slTradeIn.Data.Detail_TTUDesc", b =>
                {
                    b.Property<int>("iJobID")
                        .HasColumnType("int");

                    b.Property<string>("vAppleiCloudLock")
                        .HasColumnType("text");

                    b.Property<string>("vAuditIncludes")
                        .HasColumnType("text");

                    b.Property<string>("vDataErasure")
                        .HasColumnType("text");

                    b.Property<string>("vLogisticsTransportation")
                        .HasColumnType("text");

                    b.Property<string>("vPayment")
                        .HasColumnType("text");

                    b.Property<string>("vProductEligibility")
                        .HasColumnType("text");

                    b.Property<string>("vProductGradingB")
                        .HasColumnType("text");

                    b.Property<string>("vProductGradingC")
                        .HasColumnType("text");

                    b.Property<string>("vProductGradingD")
                        .HasColumnType("text");

                    b.Property<string>("vRecycling")
                        .HasColumnType("text");

                    b.Property<string>("vReportingSettlement")
                        .HasColumnType("text");

                    b.Property<string>("vSpecialPackaging")
                        .HasColumnType("text");

                    b.HasKey("iJobID")
                        .HasName("PK_Detail_TTUMath");

                    b.ToTable("Detail_TTUDesc");
                });

            modelBuilder.Entity("slTradeIn.Data.Detail_TTU_emailTemplate", b =>
                {
                    b.Property<int>("iEmailTemplateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("iEmailTemplateID"));

                    b.Property<bool>("bActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("dCreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("dInactiveDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("dUpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("vHTMLBody")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("vSubject")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("vTemplateName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("iEmailTemplateID");

                    b.ToTable("Detail_TTU_emailTemplate");
                });

            modelBuilder.Entity("slTradeIn.Data.Detail_TTU_partnerLinkIP", b =>
                {
                    b.Property<int>("iIPPartnerCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("iIPPartnerCode"));

                    b.Property<bool>("bActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("dCreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("dInactiveDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("iUserIDPartner")
                        .HasColumnType("int");

                    b.Property<string>("vIP")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("iIPPartnerCode")
                        .HasName("PK_Detail_TTU_IPPartnerLink");

                    b.ToTable("Detail_TTU_partnerLinkIP");
                });

            modelBuilder.Entity("slTradeIn.Data.Detail_TTU_user", b =>
                {
                    b.Property<int>("iUserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("iUserID"));

                    b.Property<bool>("bActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("bIsAdmin")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("dDateCreation")
                        .HasColumnType("datetime");

                    b.Property<int?>("iTTUTechPartner")
                        .HasColumnType("int");

                    b.Property<int?>("iUserIDPartner")
                        .HasColumnType("int");

                    b.Property<string>("vCellphone")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("vCompanyName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("vEmail")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("vExtension")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("vFirstName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("vIPCreation")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("vLastName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("vOfficePhone")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("vPassword")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("vTitle")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("iUserID");

                    b.ToTable("Detail_TTU_user");
                });

            modelBuilder.Entity("slTradeIn.Data.Detail_TTU_userCart", b =>
                {
                    b.Property<int>("iCartID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("iCartID"));

                    b.Property<DateTime?>("bDateSigned")
                        .HasColumnType("datetime");

                    b.Property<bool>("bSerializedReport")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("dDateCreated")
                        .HasColumnType("datetime");

                    b.Property<int?>("iBoxStatusID")
                        .HasColumnType("int");

                    b.Property<int>("iLogisticID")
                        .HasColumnType("int");

                    b.Property<int>("iQuoteNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("iUserID")
                        .HasColumnType("int");

                    b.Property<decimal?>("mTotal")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<decimal?>("mTotalDOD")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<decimal?>("mTotalPayout")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<decimal?>("mTotalSerializedReport")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<decimal?>("mTotalShipping")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<string>("vImageName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("vShippingType")
                        .HasColumnType("int");

                    b.HasKey("iCartID")
                        .HasName("PK_Detail_TTU_userCartPreference_1");

                    b.ToTable("Detail_TTU_userCart");
                });

            modelBuilder.Entity("slTradeIn.Data.Detail_TTU_userCartDetail", b =>
                {
                    b.Property<int>("iCartDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("iCartDetailID"));

                    b.Property<bool>("bDOD")
                        .HasColumnType("bit");

                    b.Property<bool>("bIsAccessible")
                        .HasColumnType("bit");

                    b.Property<int>("iCartID")
                        .HasColumnType("int");

                    b.Property<int>("iCategory")
                        .HasColumnType("int");

                    b.Property<int>("iHDD")
                        .HasColumnType("int");

                    b.Property<int>("iManufacturer")
                        .HasColumnType("int");

                    b.Property<int>("iMemory")
                        .HasColumnType("int");

                    b.Property<int>("iModelID")
                        .HasColumnType("int");

                    b.Property<int>("iProcessorGen")
                        .HasColumnType("int");

                    b.Property<int>("iProcessorType")
                        .HasColumnType("int");

                    b.Property<int>("iQuantity")
                        .HasColumnType("int");

                    b.Property<decimal>("mPrice")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<decimal>("mTotal")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<string>("vGrade")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.HasKey("iCartDetailID")
                        .HasName("PK_Detail_TTU_userCart");

                    b.ToTable("Detail_TTU_userCartDetail");
                });

            modelBuilder.Entity("slTradeIn.Data.Detail_TTU_userEmail", b =>
                {
                    b.Property<int>("iEmailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("iEmailID"));

                    b.Property<int?>("UseriUserID")
                        .HasColumnType("int");

                    b.Property<bool>("bStatus")
                        .HasColumnType("bit");

                    b.Property<DateTime>("dCreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("dUpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("iUserID")
                        .HasColumnType("int");

                    b.Property<string>("vEmail")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("vEmailGroup")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("vEmailProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("vName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("iEmailID");

                    b.HasIndex("UseriUserID");

                    b.ToTable("Detail_TTU_userEmail");
                });

            modelBuilder.Entity("slTradeIn.Data.Detail_TTU_userEmailCampaign", b =>
                {
                    b.Property<int>("iEmailCampaingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("iEmailCampaingID"));

                    b.Property<DateTime>("dDateCreated")
                        .HasColumnType("datetime");

                    b.Property<int>("iEmailTemplateID")
                        .HasColumnType("int");

                    b.Property<int>("iUserID")
                        .HasColumnType("int");

                    b.Property<string>("vHTMLBody")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("vName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("vSubject")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("iEmailCampaingID");

                    b.ToTable("Detail_TTU_userEmailCampaign");
                });

            modelBuilder.Entity("slTradeIn.Data.Detail_TTU_userEmailCampaignDetail", b =>
                {
                    b.Property<int>("iEmailCampaingDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("iEmailCampaingDetailID"));

                    b.Property<int>("iEmailCampaingID")
                        .HasColumnType("int");

                    b.Property<string>("vEmailGroup")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("iEmailCampaingDetailID");

                    b.ToTable("Detail_TTU_userEmailCampaignDetail");
                });

            modelBuilder.Entity("slTradeIn.Data.Detail_TTU_userLocation", b =>
                {
                    b.Property<int>("iLogisticID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("iLogisticID"));

                    b.Property<bool>("bIsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("dDateCreated")
                        .HasColumnType("datetime");

                    b.Property<int>("iUserID")
                        .HasColumnType("int");

                    b.Property<string>("vCity")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("vIPCreated")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("vLocationContactPerson")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("vLocationEmail")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("vLocationLabel")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("vLocationStreetAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("vPostalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("vState")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("vSuiteAppt")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("iLogisticID");

                    b.HasIndex("iUserID");

                    b.ToTable("Detail_TTU_userLocation");
                });

            modelBuilder.Entity("slTradeIn.Data.Detail_TTU_userManualQuote", b =>
                {
                    b.Property<int>("iManualQuoteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("iManualQuoteID"));

                    b.Property<bool>("bSerializedReport")
                        .HasColumnType("bit");

                    b.Property<DateTime>("dDateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("dSignDate")
                        .HasColumnType("datetime");

                    b.Property<int>("iBoxStatusID")
                        .HasColumnType("int");

                    b.Property<int>("iUserID")
                        .HasColumnType("int");

                    b.Property<int>("vShippingType")
                        .HasColumnType("int");

                    b.HasKey("iManualQuoteID");

                    b.ToTable("Detail_TTU_userManualQuote");
                });

            modelBuilder.Entity("slTradeIn.Data.Detail_TTU_userManualQuoteDetail", b =>
                {
                    b.Property<int>("iManualQuoteDetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("iManualQuoteDetID"));

                    b.Property<int>("iManualQuoteID")
                        .HasColumnType("int");

                    b.Property<int>("iQuantity")
                        .HasColumnType("int");

                    b.Property<string>("vHDD")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("vManufacturer")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("vModelNumber")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("vProcessor")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("vRam")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("iManualQuoteDetID");

                    b.ToTable("Detail_TTU_userManualQuoteDetail");
                });

            modelBuilder.Entity("slTradeIn.Data.Detail_TTU_userManualQuoteLocation", b =>
                {
                    b.Property<int>("iManualQuoteLocID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("iManualQuoteLocID"));

                    b.Property<int>("iLogisticID")
                        .HasColumnType("int");

                    b.Property<int>("iManualQuoteID")
                        .HasColumnType("int");

                    b.HasKey("iManualQuoteLocID");

                    b.ToTable("Detail_TTU_userManualQuoteLocation");
                });

            modelBuilder.Entity("slTradeIn.Data.Ref_Cat", b =>
                {
                    b.Property<int>("iCatID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("iCatID"));

                    b.Property<string>("cCatActive")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<int?>("nAVGWeight")
                        .HasColumnType("int");

                    b.Property<string>("vCatDescription")
                        .IsRequired()
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("vCategoryType")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("vProductCode")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.HasKey("iCatID")
                        .HasName("PK_ref_Cat");

                    b.HasIndex(new[] { "vCatDescription" }, "unq_vCatDescription")
                        .IsUnique();

                    b.ToTable("Ref_Cat");
                });

            modelBuilder.Entity("slTradeIn.Data.Ref_Main", b =>
                {
                    b.Property<int>("iRefMainID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("iRefMainID"));

                    b.Property<bool?>("bIsApproved")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("cRefMainActive")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<DateTime?>("dApprovedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("dDateCreated")
                        .HasColumnType("datetime");

                    b.Property<int?>("iRefOrder")
                        .HasColumnType("int");

                    b.Property<string>("vApprovedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValueSql("('Initial Script')");

                    b.Property<string>("vCreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("vCulture")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("vDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("vRef1")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("vRef2")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("vReferenceArea")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("vReferenceID")
                        .IsRequired()
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("vReferenceIDGroup")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("vTagHelp")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("vTagValue")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("iRefMainID");

                    b.HasIndex(new[] { "iRefMainID", "vReferenceID", "vDescription" }, "_dta_index_Ref_Main_7_1896393825__K1_K2_K3");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "iRefMainID", "vReferenceID", "vDescription" }, "_dta_index_Ref_Main_7_1896393825__K1_K2_K3"), 80);

                    b.HasIndex(new[] { "vReferenceID", "vDescription", "iRefMainID" }, "_dta_index_Ref_Main_7_1896393825__K2_K3_K1");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "vReferenceID", "vDescription", "iRefMainID" }, "_dta_index_Ref_Main_7_1896393825__K2_K3_K1"), 80);

                    b.HasIndex(new[] { "vReferenceID", "vDescription", "vReferenceIDGroup" }, "unq_RefMain")
                        .IsUnique()
                        .HasFilter("[vReferenceID] IS NOT NULL AND [vDescription] IS NOT NULL AND [vReferenceIDGroup] IS NOT NULL");

                    b.ToTable("Ref_Main");
                });

            modelBuilder.Entity("slTradeIn.Data.vw_TTU_BoxList", b =>
                {
                    b.Property<string>("QuoteStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("dDateCreated")
                        .HasColumnType("datetime");

                    b.Property<int>("iCartID")
                        .HasColumnType("int");

                    b.Property<int>("iUserID")
                        .HasColumnType("int");

                    b.Property<string>("vLocationContactPerson")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("vLocationLabel")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.ToTable((string)null);

                    b.ToView("vw_TTU_BoxList", (string)null);
                });

            modelBuilder.Entity("slTradeIn.Data.vw_TTU_ManualQuoteList", b =>
                {
                    b.Property<string>("QuoteStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("bSerializedReport")
                        .HasColumnType("bit");

                    b.Property<DateTime>("dDateCreated")
                        .HasColumnType("datetime");

                    b.Property<int>("iManualQuoteID")
                        .HasColumnType("int");

                    b.Property<int>("iUserID")
                        .HasColumnType("int");

                    b.Property<int>("vShippingType")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("vw_TTU_ManualQuoteList", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("slTradeIn.Data.Detail_ModelMasterPricing", b =>
                {
                    b.HasOne("slTradeIn.Data.Detail_ModelMaster", "iModel")
                        .WithMany("Detail_ModelMasterPricing")
                        .HasForeignKey("iModelID")
                        .IsRequired()
                        .HasConstraintName("FK_Detail_ModelMasterPricing_Detail_ModelMaster");

                    b.Navigation("iModel");
                });

            modelBuilder.Entity("slTradeIn.Data.Detail_TTU_userEmail", b =>
                {
                    b.HasOne("slTradeIn.Data.Detail_TTU_user", "User")
                        .WithMany("UserEmails")
                        .HasForeignKey("UseriUserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("slTradeIn.Data.Detail_TTU_userLocation", b =>
                {
                    b.HasOne("slTradeIn.Data.Detail_TTU_user", "iUser")
                        .WithMany()
                        .HasForeignKey("iUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("iUser");
                });

            modelBuilder.Entity("slTradeIn.Data.Detail_ModelMaster", b =>
                {
                    b.Navigation("Detail_ModelMasterPricing");
                });

            modelBuilder.Entity("slTradeIn.Data.Detail_TTU_user", b =>
                {
                    b.Navigation("UserEmails");
                });
#pragma warning restore 612, 618
        }
    }
}
